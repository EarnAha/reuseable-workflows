name: Deploy to EC2

on:
  workflow_call:
    inputs:
      NODE_ENV:
        required: true
        type: string
      BRANCH_NAME:
        required: true
        type: string
      AWS_REGION:
        required: true
        type: string
      AWS_ASSUME_ROLE_ARN:
        required: true
        type: string
      AWS_SECRET_RETRIEVE_IDS:
        required: true
        type: string
      AWS_EC2_SHA_CHECK_URL:
        required: true
        type: string
      AWS_EC2_SHA_EXPECTED_VALUE_PATH:
        required: false
        type: string
        default: 'data.commit'
      AWS_EC2_APP_WAIT_SECONDS:
        required: false
        type: number
        default: 300
      SENTRY_ORG_NAME:
        required: true
        type: string
      SENTRY_SOURCEMAP_PATH:
        required: true
        type: string
      AWS_EC2_APP_FOLDER_NAME:
        required: true
        type: string
      AWS_EC2_APP_RESTART_COMMAND:
        required: true
        type: string
      WAIT_FOR_ACTION_NAME_SUCCEED:
        required: false
        type: string
        default: run-test-cases
      WAIT_INTERVAL:
        required: false
        type: number
        default: 60
    secrets:
      AWS_EC2_HOST_NAME:
        required: true
        type: string
      SENTRY_PROJECT_NAME:
        required: true
      SENTRY_AUTH_TOKEN:
        required: true

jobs:
  wait-for-tests-succeed:
    runs-on: self-hosted
    steps:
      - uses: lewagon/wait-on-check-action@v1.0.0
        with:
          ref: ${{ github.ref }}
          check-name: ${{ inputs.WAIT_FOR_ACTION_NAME_SUCCEED }}
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: ${{ inputs.WAIT_INTERVAL }}

  create-deployment:
    runs-on: self-hosted
    needs: wait-for-tests-succeed
    # Map a step output to  a job output
    outputs:
      deploymentId: ${{ fromJson(steps.create_deployment.outputs.data).id }}
    steps:
    - name: Create Github deployment
      id: create_deployment
      uses: octokit/request-action@v2.x
      with:
        route: POST /repos/:repository/deployments
        repository: ${{ github.repository }}
        ref: ${{ github.head_ref || github.ref }}
        environment: ${{ inputs.NODE_ENV }}
        auto_merge: false
      env:
        GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

  deploy:
    runs-on: self-hosted
    needs: create-deployment
    # These permissions are needed to interact with GitHub's OIDC Token endpoint.
    permissions:
      id-token: write
      contents: read
      deployments: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          persist-credentials: false
          ref: main

      - name: Read package info
        id: package
        uses: codex-team/action-nodejs-package-info@v1

      # =========================================================
      #
      # Get information
      #
      # =========================================================

      - name: Configure AWS credentials
        id: aws-credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          # Use GitHub OIDC provider
          role-to-assume: ${{ inputs.AWS_ASSUME_ROLE_ARN }}
          aws-region: ${{ inputs.AWS_REGION }}

      - name: Get secrets from AWS SecretsManager
        uses: aws-actions/aws-secretsmanager-get-secrets@v1
        with:
          secret-ids: ${{ inputs.AWS_SECRET_RETRIEVE_IDS }}
          parse-json-secrets: true

      # =========================================================
      #
      # Show information
      #
      # =========================================================

      - name: Dump Current Env
        env:
          ENV_VARS: ${{ toJson(env) }}
        run: echo "$ENV_VARS"

      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"

      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo "$JOB_CONTEXT"

      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "$STEPS_CONTEXT"


      # =========================================================
      #
      # Start deployment
      #
      # =========================================================

      - name: set deployment status to in progress
        id: start_deployment
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/:repository/deployments/:deployment/statuses
          repository: ${{ github.repository }}
          deployment: ${{ needs.create-deployment.outputs.deploymentId }}
          environment: ${{ inputs.NODE_ENV }}
          environment_url: https://${{ steps.deploy-apprunner.outputs.service-url }}
          log_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          state: in_progress
          mediaType: '{"previews": ["flash", "ant-man"]}'
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

      - name: Pulling newest code and restart pm2 app
        uses: fifsky/ssh-action@master
        with:
          command: |
            cd ./${{ inputs.AWS_EC2_APP_FOLDER_NAME }}
            git fetch
            git fetch --tags
            git reset --hard
            git checkout ${{ inputs.BRANCH_NAME }}
            npm ci
            ${{ inputs.AWS_EC2_APP_RESTART_COMMAND }}
            sleep 10
            pm2 logs ${{ inputs.AWS_EC2_APP_FOLDER_NAME }} --nostream --lines 100
          host: ${{ inputs.AWS_EC2_HOST_NAME }}
          user: ubuntu
          key: ${{ inputs.EC2_SSH_KEY }}


      # =========================================================
      #
      # Check the git sha of latest deployment
      #
      # =========================================================
      - name: Add SHORT_SHA env property with commit short sha
        run: echo "SHORT_SHA=`echo ${GITHUB_SHA} | cut -c1-7`" >> $GITHUB_ENV

      - name: Check SHA of latest deployment
        uses: mydea/action-wait-for-api@v1.0.0
        with:
          url: ${{ inputs.AWS_EC2_SHA_CHECK_URL }}
          expected-response-field: ${{ inputs.AWS_EC2_SHA_EXPECTED_VALUE_PATH }}
          expected-response-field-value: ${{ inputs.SHORT_SHA }}
          timeout: ${{ inputs.AWS_EC2_APP_WAIT_SECONDS }}
          interval: 10

      # =========================================================
      #
      # Update Sentry Release
      #
      # =========================================================

      - name: Create Sentry Release
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ inputs.SENTRY_ORG_NAME }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT_NAME }}
          # SENTRY_URL: https://sentry.io/
        with:
          version: ${{ steps.package.outputs.name }}@${{ steps.package.outputs.version }}
          sourcemaps: ${{ inputs.SENTRY_SOURCEMAP_PATH }}
          environment: ${{ inputs.NODE_ENV }}
          ignore_empty: true


      # =========================================================
      #
      # Update Github deployment
      #
      # =========================================================

      - name: set deployment status to success
        id: successful_deployment
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/:repository/deployments/:deployment/statuses
          repository: ${{ github.repository }}
          deployment: ${{ needs.create-deployment.outputs.deploymentId }}
          environment: ${{ inputs.NODE_ENV }}
          environment_url: https://${{ steps.deploy-apprunner.outputs.service-url }}
          log_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          mediaType: '{"previews": ["ant-man"]}'
          state: success
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

      - name: set deployment status to failure
        id: failed_deployment
        uses: octokit/request-action@v2.x
        if: failure()
        with:
          route: POST /repos/:repository/deployments/:deployment/statuses
          repository: ${{ github.repository }}
          deployment: ${{ needs.create-deployment.outputs.deploymentId }}
          environment: ${{ inputs.NODE_ENV }}
          environment_url: https://${{ steps.deploy-apprunner.outputs.service-url }}
          log_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          mediaType: '{"previews": ["ant-man"]}'
          state: failure
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
